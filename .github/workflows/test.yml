name: Test Package

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # full git history for setuptools-scm

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Make g-xtb binary executable (before install)
        run: |
          chmod +x vendor/g-xtb/binary/gxtb

      - name: Install package
        run: |
          pip install .

      - name: Test water.py example
        run: |
          cd examples
          python water.py

      - name: Test spectroscopy.py example
        run: |
          cd examples
          python spectroscopy.py

      - name: Test package installation and independence
        run: |
          # Create a temporary directory outside the source repo to ensure
          # we are testing the installed package, not the local source.
          TEST_DIR=$(mktemp -d)
          cd $TEST_DIR

          python -c "
          import sys
          from pathlib import Path
          from ase import Atoms
          import gxtb_ase
          from gxtb_ase import GxTB

          print('--- Verifying Package Installation ---')

          # 1. Check if the package is imported from site-packages
          pkg_path = Path(gxtb_ase.__file__).parent
          print(f'Package installed at: {pkg_path}')
          if 'site-packages' not in str(pkg_path):
              print('ERROR: Package is not installed in site-packages.')
              sys.exit(1)
          print('SUCCESS: Package is installed in site-packages.')

          # 2. Initialize calculator and check its paths
          # This should now find the binary and params in site-packages
          calc = GxTB()
          print(f'Calculator found binary at: {calc.binary_path}')
          print(f'Calculator found parameters at: {calc.parameter_path}')

          # 3. Verify binary path is the one in the installed package
          installed_binary_path = pkg_path / 'vendor/g-xtb/binary/gxtb'
          if not installed_binary_path.exists():
              print(f'ERROR: Binary not found in installed package at: {installed_binary_path}')
              sys.exit(1)
          if not str(calc.binary_path) == str(installed_binary_path):
              print(f'ERROR: Calculator is using wrong binary ({calc.binary_path}) instead of the installed one ({installed_binary_path})')
              sys.exit(1)
          print('SUCCESS: Calculator is using the correct binary from the installed package.')

          # 4. Verify parameter path is the one in the installed package
          installed_param_path = pkg_path / 'vendor/g-xtb/parameters'
          if not installed_param_path.exists():
              print(f'ERROR: Parameters not found in installed package at: {installed_param_path}')
              sys.exit(1)
          if not str(calc.parameter_path) == str(installed_param_path):
              print(f'ERROR: Calculator is using wrong parameter path ({calc.parameter_path}) instead of the installed one ({installed_param_path})')
              sys.exit(1)
          print('SUCCESS: Calculator is using the correct parameters from the installed package.')

          print('\n--- Testing Package Functionality ---')

          # 5. Run a calculation to ensure it works end-to-end
          atoms = Atoms('H2O', positions=[[0, 0, 0], [0.957, 0, 0], [0.24, 0.927, 0]])
          atoms.calc = calc
          energy = atoms.get_potential_energy()
          forces = atoms.get_forces()

          print(f'Water molecule energy: {energy:.6f} eV')
          print(f'Forces shape: {forces.shape}')
          print('\nSUCCESS: All checks passed. Package works independently of the source repository.')
          "

      - name: Check for output files
        run: |
          cd examples
          ls -la *.traj || echo "No trajectory files found"
          ls -la *.log || echo "No log files found"
          ls -la IR/ || echo "No IR directory found"
          ls -la IR/data/ || echo "No IR data files found"
          ls -la IR/plots/ || echo "No IR plot files found"
          ls -la IR/thermochemistry/ || echo "No thermochemistry files found"
